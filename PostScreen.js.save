i
'use strict';

var BASE_URL = 'https://www.reddit.com/comments/';

var React = require('react-native');

var PostRow = require('./PostRow');
var SectionTitle = require('./SectionTitle');
var MessageBox = require('./MessageBox');

var {
  StyleSheet,
  Text,
  View,
  TouchableHighlight,
} = React;

var CommentRow = React.createClass({
  render: function() {
    if (this.props.comment.kind == "t1") {
      return (
        <View style={styles.commentBox}>
          <Text style={styles.commentBoxAuthor}>
            {this.props.comment.data.author} - {this.props.comment.data.score}
          </Text>
          <Text style={styles.commentBoxContent}>
            {this.props.comment.data.body}
          </Text>
        </View>
      );
    }
    return(
      <View></View>
    );
  }
});

var PostScreen = React.createClass({
  getInitialState: function() {
    return ({
      topComments: {},
      isLoading: false,
    });
  },
  getRequestUrl: function(postId) {
    return `${BASE_URL}${postId}/.json?limit=10`;
  },
  fetchComments: function() {
    if (this.state.isLoading) {
      return false;
    }
    this.setState({ isLoading: true });
    fetch(this.getRequestUrl(this.props.post.data.id))
    .then((response) => response.json())
    .catch((error) => {
      this.setState({
        topComments: {},
        isLoading: false,
      })
    })
    .then((responseData) => {
      if (responseData
          && responseData[1]
          && responseData[1].data
          && responseData[1].data.children) {
        this.setState({
          isLoading: false,
          topComments: responseData[1].data.children,
        });
      } else {
        this.setState({
          isLoading: false,
          topComments: {},
        });
      }
    })
    .done();
  },
  componentDidMount: function() {
    this.fetchComments();
  },
  renderComments: function(comment, id) {
    return (
      <CommentRow key={id} comment={comment} />
        {comment.data.replies.map((reply, replyId) => {
          if (reply && reply.data && reply.data.children) {
            return (<CommentRow key={replyId} comment={reply.data.children}/>);
          }
        })}
    );
  },
  render: function() {
    if (this.state.topComments.length) {
      console.log(this.state.topComments);
      return (
        <View style={styles.main}>
          <PostRow post={this.props.post} />
          <SectionTitle title="TOP COMMENTS" />
            {this.state.topComments.map((comment, id) => {
              return this.renderComments(comment, id);
            })}
          <SectionTitle title="ACTIONS" />
        </View>
      );
    } else if (!this.state.isLoading) {
      return (
        <View style={styles.main}>
          <PostRow post={this.props.post} />
          <SectionTitle title="TOP COMMENTS" />
          <MessageBox msg="Error while fetching Post..." />
          <SectionTitle title="ACTIONS" />
        </View>
      );
    } else {
      return(
        <View style={styles.main}>
          <PostRow post={this.props.post} />
          <SectionTitle title="TOP COMMENTS" />
          <MessageBox msg="Loading..." />
          <SectionTitle title="ACTIONS" />
        </View>
      );
    }
  },
});


var styles = StyleSheet.create({
  main: {
    flexDirection: 'column',
    marginTop: 64,
    backgroundColor: '#FCFEFF'
  },
  commentBox: {
  },
  commentBoxAuthor: {
  },
  commentBoxContent: {
  },
});

module.exports = PostScreen;
